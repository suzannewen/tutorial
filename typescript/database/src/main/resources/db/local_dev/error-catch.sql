-- drop table bugsnag_manual;
-- drop table bugsnag;

select * from private.cabbage_error
order by id desc
;

select * from public.flyway_schema_history
;

-- schema did not get deleted when I did a SB restore database
-- somehow the restore doesn't delete the private schema
-- but it did delet the table within it?
create schema if not exists private;

drop table private.cabbage_error;

create table private.cabbage_error (
  id integer generated by default as identity
    constraint cabbage_error_pkey primary key,
  content json not null
);

grant insert, select, update, delete, truncate, references, trigger on private.cabbage_error to supabase_auth_admin;
grant insert on private.cabbage_error to anon;

-- grant insert on private.cabbage_error to authenticated;

-- create table private.cabbage_error (
--   id integer generated by default as identity
--     constraint cabbage_error_pkey primary key,
--   content json not null
-- );



drop procedure public.store_error;

-- adding "security definer" didn't make it able to be called
create or replace procedure public.store_error(json_content jsonb)
  language sql
as $$
insert into private.cabbage_error (content) values (json_content);
$$;

grant execute on procedure public.store_error(jsonb) to anon;

create or replace function public.store_error_v2(json_content jsonb)
returns void
  language sql
as $$
insert into private.cabbage_error (content) values (json_content);
$$;

grant execute on function public.store_error_v2(jsonb) to anon;

select public.store_error_v2('{"test": "test2"}'::jsonb);
drop function public.store_error_v3(json_content jsonb);

select * from private.cabbage_error;

drop function public.store_error_v3;

create or replace function public.store_error_v3(json_content jsonb)
returns void security definer
  language sql
as $$
  insert into private.cabbage_error (content) values(json_content);
$$;

grant execute on function public.store_error_v3(jsonb) to anon;


drop function public.store_error_v4(text);

create or replace function public.store_error_v4(json_content text)
returns void
  language plpgsql
as $$
  declare
  begin
    insert into private.cabbage_error (content) values(json_content::json);
  end
$$;

grant execute on function public.store_error_v4(text) to anon;


select public.store_error_v3('{"test": "test2"}'::jsonb);

-- works
-- call public.store_error('{"test": "test2"}'::jsonb);



select * from private.cabbage_error;

-- create table public.bugsnag (
--   id text constraint bugsnag_pkey primary key,
--   apiKey text not null
-- );

-- create table public.bugsnag (
--   id integer generated by default as identity
--     constraint bugsnag_pkey
--       primary key,
--   "apiKey" text,
--   "events" jsonb,
--   "notifier" jsonb
-- );
--
-- select * from public.bugsnag;
--
-- select *
-- from bugsnag_manual
-- ;

